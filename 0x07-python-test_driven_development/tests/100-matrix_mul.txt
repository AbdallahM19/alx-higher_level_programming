The ``100-matrix_mul`` module
============================

Using ``matrix_mul``
---------------------

Import the ``matrix_mul`` function:
    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Test matrix multiplication with a 2x2 matrix and a 2x2 matrix:
    >>> matrix1 = [[1, 2], [3, 4]]
    >>> matrix2 = [[1, 2], [3, 4]]
    >>> matrix_mul(matrix1, matrix2)
    [[7, 10], [15, 22]]

Test matrix multiplication with a 1x2 matrix and a 2x2 matrix:
    >>> matrix3 = [[1, 2]]
    >>> matrix4 = [[3, 4], [5, 6]]
    >>> matrix_mul(matrix3, matrix4)
    [[13, 16]]

Test matrix multiplication with an empty matrix and a 2x2 matrix:
    >>> matrix3 = []
    >>> matrix4 = [[3, 4], [5, 6]]
    >>> matrix_mul(matrix3, matrix4)
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

    >>> matrix3 = [[1, 2]]
    >>> matrix4 = []
    >>> matrix_mul(matrix3, matrix4)
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

Test matrix multiplication with a matrix containing a non-numeric element:
    >>> matrix5 = [[1, 'a'], [3, 4]]
    >>> matrix6 = [[1, 2], [3, 4]]
    >>> matrix_mul(matrix5, matrix6)
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

    >>> matrix7 = [[1, 2], [3, 4]]
    >>> matrix8 = [[1, 'b'], [3, 4]]
    >>> matrix_mul(matrix7, matrix8)
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats

Test additional:
Test 1:
    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

Test 2:
>>> m_a = [
    ... [1, 3],
    ... [2, 4]
    ... ]
    >>> m_b = [
    ... [1, 3],
    ... [2, 4, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size
