=============================
The ``7-base_geometry`` module
=============================

Using ``BaseGeometry``
---------------------

Import the class:

# Importing the function from the module
>>> BG = __import__("7-base_geometry").BaseGeometry

# Checking for module docstring
>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
True

# Checking for class docstring
>>> c = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(c) > 1
True

# Checking for method docstring
>>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
>>> len(mod1) > 1
True
>>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> len(mod2) > 1
True

# Checking for area failure
>>> b = BG()
>>> b.area()
Traceback (most recent call last):
  ...
Exception: area() is not implemented

# Checking too many arguments for area
Traceback (most recent call last):
File "/home/abdallah/anaconda3/lib/python3.11/doctest.py", line 1351, in __run
exec(compile(example.source, filename, "single",
File "<doctest 7-base_geometry.txt[11]>", line 1, in <module>
b.area(1)
TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

# Checking integer validator for passing integer
>>> b.integer_validator("integer", 1)

# Checking for integer == 0
>>> b.integer_validator("integer", 0)
Traceback (most recent call last):
  ...
ValueError: integer must be greater than 0

# Checking for integer < 0
>>> b.integer_validator("integer", -5)
Traceback (most recent call last):
  ...
ValueError: integer must be greater than 0

# Checking for non-integer types
>>> b.integer_validator("bool", True)
Traceback (most recent call last):
  ...
TypeError: bool must be an integer
>>> b.integer_validator("float", 1.5)
Traceback (most recent call last):
  ...
TypeError: float must be an integer
>>> b.integer_validator("complex", complex(1, 1))
Traceback (most recent call last):
  ...
TypeError: complex must be an integer
>>> b.integer_validator("string", "hello")
Traceback (most recent call last):
  ...
TypeError: string must be an integer
>>> b.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
  ...
TypeError: tuple must be an integer
>>> b.integer_validator("list", [1, 2, 3])
Traceback (most recent call last):
  ...
TypeError: list must be an integer
>>> b.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
  ...
TypeError: dict must be an integer
>>> b.integer_validator("set", {"hello", "world"})
Traceback (most recent call last):
  ...
TypeError: set must be an integer
>>> b.integer_validator("frozenset", frozenset(["hello", "world"]))
Traceback (most recent call last):
  ...
TypeError: frozenset must be an integer
>>> b.integer_validator("bytes", b"bytes")
Traceback (most recent call last):
  ...
TypeError: bytes must be an integer
>>> b.integer_validator("bytearrays", bytearray(b"bytes"))
Traceback (most recent call last):
  ...
TypeError: bytearrays must be an integer

# Test BaseGeometry class
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> base = BaseGeometry()
>>> isinstance(base, BaseGeometry)
True
>>> base.area()
Traceback (most recent call last):
  ...
Exception: area() is not implemented

>>> base.integer_validator("count", -1)
Traceback (most recent call last):
  ...
ValueError: count must be greater than 0

>>> base.integer_validator("count", 0)
Traceback (most recent call last):
  ...
ValueError: count must be greater than 0

>>> base.integer_validator("count", 1.5)
Traceback (most recent call last):
  ...
TypeError: count must be an integer

>>> base.integer_validator("count", [9, 7])
Traceback (most recent call last):
  ...
TypeError: count must be an integer

>>> base.integer_validator("count", {})
Traceback (most recent call last):
  ...
TypeError: count must be an integer

>>> base.integer_validator("count", "hi")
Traceback (most recent call last):
  ...
TypeError: count must be an integer

>>> base.integer_validator("count", 12)

>>> base.integer_validator("height", 798)

>>> base.integer_validator(hi, 12)
Traceback (most recent call last):
  ...
NameError: name 'hi' is not defined

>>> base.integer_validator("count", int(12.5))

>>> base.integer_validator("count", int("hi"))
Traceback (most recent call last):
  ...
ValueError: invalid literal for int() with base 10: 'hi'
